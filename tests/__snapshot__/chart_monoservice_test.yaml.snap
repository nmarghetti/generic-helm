chart should match snapshot:
  1: |
    apiVersion: v1
    data:
      key: value
    kind: ConfigMap
    metadata:
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: generic-chart-0.0.1
      name: monoservice
  2: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      annotations:
        configmap.reloader.stakater.com/reload: monoservice
        kubectl.kubernetes.io/default-container: app
        secret.reloader.stakater.com/reload: monoservice
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: generic-chart-0.0.1
      name: monoservice
    spec:
      replicas: 1
      selector:
        matchLabels:
          app.kubernetes.io/component: monoservice
          app.kubernetes.io/instance: mychart
          app.kubernetes.io/name: play
      template:
        metadata:
          labels:
            app.kubernetes.io/component: monoservice
            app.kubernetes.io/instance: mychart
            app.kubernetes.io/name: play
        spec:
          containers:
            - envFrom:
                - configMapRef:
                    name: monoservice
                - secretRef:
                    name: monoservice
              image: stefanprodan/podinfo:latest
              imagePullPolicy: IfNotPresent
              name: app
              ports:
                - containerPort: 8080
  3: |
    apiVersion: v1
    kind: Service
    metadata:
      labels:
        app.kubernetes.io/component: monoservice
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: generic-chart-0.0.1
      name: monoservice
    spec:
      ports:
        - port: 8080
          targetPort: 8080
      selector:
        app.kubernetes.io/component: monoservice
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/name: play
      type: ClusterIP
  4: |
    apiVersion: traefik.io/v1alpha1
    kind: IngressRoute
    metadata:
      annotations:
        kubernetes.io/ingress.class: traefik
      labels:
        app.kubernetes.io/instance: mychart
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: play
        app.kubernetes.io/version: na
        helm.sh/chart: generic-chart-0.0.1
      name: monoservice
    spec:
      routes:
        - kind: Rule
          match: Host(`play.local`)
          services:
            - kind: Service
              name: monoservice
              port: 8080
  5: |
    apiVersion: v1
    data:
      annotations: |
        last-synced: {{ now }}
      monoservice: |
        {{ $app := "monoservice" }}
        {{ $env := "test" }}

        {{ $externalContext := dict "data" (.external | fromJson) "env" $env "app" $app "entry" "external" }}


        {{- define "getEnvValue" -}}
          {{- $data := .context.data }}
          {{- range $key := (split "." .key) }}
            {{- if $data }}
              {{- $data = index $data $key }}
            {{- end }}
          {{- end }}

          {{- if $data }}
            {{- if eq "string" (printf "%T" $data) }}
              {{- printf "%s" ($data | replace "'" "''") }}
            {{- else }}
              {{- if index $data .context.env }}
                {{- printf "%s" (index $data .context.env | replace "'" "''") }}
              {{- else }}
                {{- if index $data "default" }}
                  {{- printf "%s" (index $data "default" | replace "'" "''") }}
                {{- else }}
                  {{- printf "ERROR: [%s][%s] '%s' is not defined neither for '%s' nor default\n" .context.app .context.entry .key .context.env }}
                  {{- $error := index nil "key is not set for that specific env and has not default value" }}
                {{- end }}
              {{- end }}
            {{- end }}
          {{- else }}
            {{- printf "ERROR: [%s][%s] Unable to find '%s'\n" .context.app .context.entry .key }}
            {{- $error := index nil "Unable to find the given key" }}
          {{- end }}
        {{- end }}

        api-key: '{{ template "getEnvValue" (dict "context" $externalContext "key" "api.key") }}'
    kind: ConfigMap
    metadata:
      name: monoservice-secretconfig
  6: |
    apiVersion: external-secrets.io/v1beta1
    kind: ExternalSecret
    metadata:
      name: monoservice
    spec:
      data:
        - remoteRef:
            key: external-secrets-project-test-external
          secretKey: external
      refreshInterval: 12h
      secretStoreRef:
        kind: ClusterSecretStore
        name: null
      target:
        name: monoservice
        template:
          engineVersion: v2
          metadata:
            annotations:
              reloader.stakater.com/match: "true"
            labels:
              chart-app: monoservice
              chart-secret-source: external-secrets
          templateFrom:
            - configMap:
                items:
                  - key: monoservice
                    templateAs: KeysAndValues
                name: monoservice-secretconfig
              target: Data
            - configMap:
                items:
                  - key: annotations
                    templateAs: KeysAndValues
                name: monoservice-secretconfig
              target: Annotations
          type: Opaque
